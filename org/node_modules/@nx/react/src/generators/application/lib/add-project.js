"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addProject = addProject;
const devkit_1 = require("@nx/devkit");
const has_webpack_plugin_1 = require("../../../utils/has-webpack-plugin");
const maybe_js_1 = require("../../../utils/maybe-js");
const has_rspack_plugin_1 = require("../../../utils/has-rspack-plugin");
const get_import_path_1 = require("@nx/js/src/utils/get-import-path");
function addProject(host, options) {
    const project = {
        root: options.appProjectRoot,
        sourceRoot: `${options.appProjectRoot}/src`,
        projectType: 'application',
        targets: {},
        tags: options.parsedTags,
    };
    if (options.bundler === 'webpack') {
        if (!(0, has_webpack_plugin_1.hasWebpackPlugin)(host) || !options.addPlugin) {
            project.targets = {
                build: createBuildTarget(options),
                serve: createServeTarget(options),
            };
        }
    }
    else if (options.bundler === 'rspack' &&
        (!(0, has_rspack_plugin_1.hasRspackPlugin)(host) || !options.addPlugin)) {
        project.targets = {
            build: createRspackBuildTarget(options),
            serve: createRspackServeTarget(options),
        };
    }
    if (options.isUsingTsSolutionConfig) {
        (0, devkit_1.writeJson)(host, (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'package.json'), {
            name: (0, get_import_path_1.getImportPath)(host, options.name),
            version: '0.0.1',
            private: true,
            nx: {
                name: options.name,
                projectType: 'application',
                sourceRoot: `${options.appProjectRoot}/src`,
                tags: options.parsedTags?.length ? options.parsedTags : undefined,
            },
        });
    }
    if (!options.isUsingTsSolutionConfig || options.alwaysGenerateProjectJson) {
        (0, devkit_1.addProjectConfiguration)(host, options.projectName, {
            ...project,
        });
    }
}
function createRspackBuildTarget(options) {
    return {
        executor: '@nx/rspack:rspack',
        outputs: ['{options.outputPath}'],
        defaultConfiguration: 'production',
        options: {
            outputPath: (0, devkit_1.joinPathFragments)('dist', options.appProjectRoot),
            index: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/index.html'),
            baseHref: '/',
            main: (0, devkit_1.joinPathFragments)(options.appProjectRoot, (0, maybe_js_1.maybeJs)(options, `src/main.tsx`)),
            tsConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [
                (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/favicon.ico'),
                (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/assets'),
            ],
            rspackConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'rspack.config.js'),
            styles: options.styledModule || !options.hasStyles
                ? []
                : [
                    (0, devkit_1.joinPathFragments)(options.appProjectRoot, `src/styles.${options.style}`),
                ],
            scripts: [],
            configurations: {
                development: {
                    mode: 'development',
                },
                production: {
                    mode: 'production',
                    optimization: true,
                    sourceMap: false,
                    outputHashing: 'all',
                    namedChunks: false,
                    extractLicenses: true,
                    vendorChunk: false,
                },
            },
        },
    };
}
function createRspackServeTarget(options) {
    return {
        executor: '@nx/rspack:dev-server',
        defaultConfiguration: 'development',
        options: {
            buildTarget: `${options.projectName}:build`,
            hmr: true,
        },
        configurations: {
            development: {
                buildTarget: `${options.projectName}:build:development`,
            },
            production: {
                buildTarget: `${options.projectName}:build:production`,
                hmr: false,
            },
        },
    };
}
function createBuildTarget(options) {
    return {
        executor: '@nx/webpack:webpack',
        outputs: ['{options.outputPath}'],
        defaultConfiguration: 'production',
        options: {
            compiler: options.compiler ?? 'babel',
            outputPath: (0, devkit_1.joinPathFragments)('dist', options.appProjectRoot != '.'
                ? options.appProjectRoot
                : options.projectName),
            index: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/index.html'),
            baseHref: '/',
            main: (0, devkit_1.joinPathFragments)(options.appProjectRoot, (0, maybe_js_1.maybeJs)(options, `src/main.tsx`)),
            tsConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [
                (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/favicon.ico'),
                (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'src/assets'),
            ],
            styles: options.styledModule || !options.hasStyles
                ? []
                : [
                    (0, devkit_1.joinPathFragments)(options.appProjectRoot, `src/styles.${options.style}`),
                ],
            scripts: [],
            webpackConfig: (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'webpack.config.js'),
        },
        configurations: {
            development: {
                extractLicenses: false,
                optimization: false,
                sourceMap: true,
                vendorChunk: true,
            },
            production: {
                fileReplacements: [
                    {
                        replace: (0, devkit_1.joinPathFragments)(options.appProjectRoot, (0, maybe_js_1.maybeJs)(options, `src/environments/environment.ts`)),
                        with: (0, devkit_1.joinPathFragments)(options.appProjectRoot, (0, maybe_js_1.maybeJs)(options, `src/environments/environment.prod.ts`)),
                    },
                ],
                optimization: true,
                outputHashing: 'all',
                sourceMap: false,
                namedChunks: false,
                extractLicenses: true,
                vendorChunk: false,
            },
        },
    };
}
function createServeTarget(options) {
    return {
        executor: '@nx/webpack:dev-server',
        defaultConfiguration: 'development',
        options: {
            buildTarget: `${options.projectName}:build`,
            hmr: true,
        },
        configurations: {
            development: {
                buildTarget: `${options.projectName}:build:development`,
            },
            production: {
                buildTarget: `${options.projectName}:build:production`,
                hmr: false,
            },
        },
    };
}
